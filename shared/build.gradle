/*
 * Copyright (c) 2020 Cattle Notes. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {

        }

        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

dependencies {
    api project(":model")
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation project(':test-shared')
    testImplementation project(':androidTest-shared')

    // Architecture Components
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    kapt "androidx.lifecycle:lifecycle-common-java8:$rootProject.lifecycleVersion"
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    api("androidx.work:work-runtime-ktx:$workVersion") {
        // WorkManager uses its own version of listenablefuture extracted from guava.
        // This is required to avoid conflicts.
        exclude group: 'com.google.guava', module: 'listenablefuture'
    }

    // JetPack
    implementation "androidx.core:core-ktx:$rootProject.corektxVersion"

    // ThreeTenBP for the shared module only. Date and time API for Java.
    testImplementation "org.threeten:threetenbp:$rootProject.threetenbpVersion"
    compileOnly "org.threeten:threetenbp:$rootProject.threetenbpVersion:no-tzdb"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.kotlinVersion"

    // Coroutines
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutinesVersion"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"

    // Multidex
    implementation "androidx.multidex:multidex:$rootProject.multidexVersion"

    // Dagger
    implementation "com.google.dagger:dagger-android:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.daggerVersion"

    // Timber
    api "com.jakewharton.timber:timber:$rootProject.timberVersion"

    // Firebase
    api "com.google.firebase:firebase-core:$rootProject.firebaseCoreVersion"
    api "com.google.firebase:firebase-auth:$firebaseAuthVersion"
    api "com.google.firebase:firebase-common-ktx:$rootProject.firebaseCommonKtxVersion"
    api "com.google.firebase:firebase-analytics:$rootProject.firebaseAnalyticsVersion"
    api "com.google.firebase:firebase-perf:$firebasePerformanceVersion"
    api "com.google.firebase:firebase-firestore:$rootProject.firebaseFirestoreVersion"
    api "com.google.firebase:firebase-firestore-ktx:$rootProject.firebaseFirestoreVersion"
    api "com.google.firebase:firebase-messaging:$rootProject.firebaseMessagingVersion"

    // Local Unit tests
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.coroutinesVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$rootProject.mockitoKotlinVersion"
    testImplementation "org.hamcrest:hamcrest-library:$rootProject.hamcrestVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.archTestingVersion"
}
