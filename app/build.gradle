/*
 * Copyright (c) 2020 Cattle Notes. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "com.pr656d.cattlenotes"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        manifestPlaceholders = [crashlyticsEnabled: true]
    }

    buildTypes {
        debug {
            versionNameSuffix = '-debug'
            manifestPlaceholders = [crashlyticsEnabled:false]
            ext.enableCrashlytics = false
//            minifyEnabled true  // To enable proguard
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            manifestPlaceholders = [crashlyticsEnabled:true]
            minifyEnabled true  // To enable proguard
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        staging {
            initWith debug
            versionNameSuffix = '-staging'

            // Specifies a sorted list of fallback build types that the
            // plugin should try to use when a dependency does not include a
            // "staging" build type.
            // Used with :test-shared, which doesn't have a staging variant.
            matchingFallbacks = ['debug']
        }
    }

    testBuildType "staging"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation project(':shared')
    testImplementation project(':test-shared')
    testImplementation project(':androidTest-shared')
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // UI
    implementation "androidx.appcompat:appcompat:$rootProject.appcompatVersion"
    implementation "androidx.cardview:cardview:$rootProject.supportlibraryVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintVersion"
    implementation "com.google.android.material:material:$rootProject.materialVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.supportlibraryVersion"
    implementation "com.google.android:flexbox:$rootProject.flexboxVersion"

    // Architecture Components
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    kapt "androidx.lifecycle:lifecycle-common-java8:$rootProject.lifecycleVersion"
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"

    // JetPack
    implementation "androidx.core:core-ktx:$rootProject.corektxVersion"
    implementation "androidx.activity:activity-ktx:$rootProject.activityVersion"
    implementation "androidx.fragment:fragment-ktx:$rootProject.fragmentVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$rootProject.lifecycleRuntimeVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigationControllerVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigationControllerVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.viewModelKtxVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.liveDataKtxVersion"

    // Date and time API for Java.
    implementation "com.jakewharton.threetenabp:threetenabp:$rootProject.threetenabpVersion"
    testImplementation "org.threeten:threetenbp:$rootProject.threetenbpVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.kotlinVersion"

    // Firebase
    implementation "com.firebaseui:firebase-ui-auth:$rootProject.firebaseUiAuthVersion"
    implementation "com.crashlytics.sdk.android:crashlytics:$firebaseCrashlyticsVersion"

    // Multidex
    implementation "androidx.multidex:multidex:$rootProject.multidexVersion"

    // Dagger
    implementation "com.google.dagger:dagger-android:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.daggerVersion"

    // Glide
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    kapt "com.github.bumptech.glide:compiler:$rootProject.glideVersion"

    // Timber
    implementation "com.jakewharton.timber:timber:$rootProject.timberVersion"

    // Networking
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttpVersion"

    // Json Parser
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"

    // Debugging
    debugImplementation "com.amitshekhar.android:debug-db:$rootProject.debugDbVersion"

    // Open-source licences
    implementation "com.google.android.gms:play-services-oss-licenses:$rootProject.openSourceLicencesVersion"

    // Leak canary
//    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.leakCanaryVersion"

    // Local Unit tests
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.coroutinesVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$rootProject.mockitoKotlinVersion"
    testImplementation "org.hamcrest:hamcrest-library:$rootProject.hamcrestVersion"
    kaptTest "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.archTestingVersion"

    // UI Testing
    androidTestImplementation "androidx.test:runner:$rootProject.testRunnerVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.testExtRunnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.rulesVersion"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
}

apply plugin: 'com.google.gms.google-services'